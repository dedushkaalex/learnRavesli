#include <iostream>

//Enum классы имеют локальную область видимости, в отличии от enum. Используйте Enum классы.
enum class Fruits   // добавление "class" к enum определяет перечисление с ограниченной областью видимости, вместо стандартного "глобального" перечисления
{
	LEMON,			// LEMON находится внутри той же области видимости, что и Fruits
	LIME,
};

enum class Guns
{
	PISTOL, //PISTOL находится внутри той же области видимости, что и Guns
	KNIFE,
};


int main()
{
	Fruits fruit = Fruits::LEMON;	// примечание: LEMON напрямую не доступен, мы должны использовать Fruits::LEMON
	Guns gun{ Guns::PISTOL };

	//if (fruit == gun) // ошибка компиляции, поскольку компилятор не знает, как сравнивать разные типы: Fruits и Guns
	//{
	//	return -1;
	//}
	// Это означает, что компилятор не сможет сравнивать перечислители из разных перечислений. 
	//Если вы попытаетесь это сделать, компилятор выдаст ошибку (как в примере, приведенном выше).

	/*
	С классами enum компилятор больше не сможет неявно конвертировать значения перечислителей в целые числа. Это хорошо! Но иногда могут быть ситуации, когда 
	нужно будет вернуть эту особенность. В таких случаях вы можете явно преобразовать перечислитель класса enum в тип int, 
	используя оператор static_cast:
	*/
	Fruits fru = Fruits::LIME;

	//std::cout << fru; // не будет работать, поскольку нет неявного преобразования в тип int
	std::cout << static_cast<int>(fru); // результатом будет 1
	system("pause");
	return 0;
}