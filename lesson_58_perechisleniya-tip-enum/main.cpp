//Язык C++ позволяет программистам создавать свои собственные (пользовательские) типы данных.
#include <iostream>

int main()
{
	//объявляем новое перечисление Colors
	//Объявление перечислений не требует выделения памяти. Только когда переменная 
	//перечисляемого типа определена (например, как переменная paint в примере, приведенном ниже),
	//только тогда выделяется память для этой переменной.

	//Также имена перечислителей не должны совпадать с другими перечислителями в другом перечисляемом типе
	/*
	enum Colors
{
	YELLOW,
	BLACK, // BLACK находится в глобальном пространстве имен
	PINK
};
 
enum Feelings
{
	SAD,
	ANGRY,
	BLACK // получим ошибку, так как BLACK уже используется в enum Colors
};
//например: ANIMAL_ или COLOR_, как для предотвращения конфликтов имен, так и в целях комментирования кода.
	
	*/
	enum Colors {
		// Ниже находятся перечислители - все возможные значения этого типа данных
		// Каждый перечислитель отделяется запятой (НЕ точкой с запятой)
		//Каждому перечислителю автоматически присваивается целочисленное значение в зависимости от его позиции в списке(по умолчанию с нуля)
		COLOR_RED,   // присваивается 0
		COLOR_GREEN, // присваивается 1
		COLOR_BLUE,  // присваивается 2
		COLOR_WHITE, // присваивается 3
		COLOR_BROWN, // присваивается 4
		COLOR_PINK,  //начиная с с++ 11, конечная запятая разрешена, но не обязательна.
	};// однако сам enum должен заканчиваться точкой с запятой

	//Определяем несколько переменных перечисляемого типа Colors
	Colors paint{ COLOR_BLUE };
	Colors house{ COLOR_PINK };
	std::cout<<COLOR_GREEN<<std::endl;
	std::cout << "___________________________________________________________\n\n";

	//Можно и самому определять значения перечислителей.
	//Любые, не определенные вами перечислители, будут иметь значения на единицу больше, чем значения предыдущих перечислителей.
 
		// Определяем новый перечисляемый тип Animals
		enum Animals
	{
		ANIMAL_PIG = -4,
		ANIMAL_LION, // присваивается -3
		ANIMAL_CAT, // присваивается -2
		ANIMAL_HORSE = 6,
		ANIMAL_ZEBRA = 6, // имеет то же значение, что и ANIMAL_HORSE
		ANIMAL_COW // присваивается 7
	};
		/*
		Совет: Не присваивайте свои значения перечислителям.
		Правило: Не присваивайте одинаковые значения двум перечислителям в одном перечислении, если на это нет веской причины.
		*/

		std::cout << ANIMAL_LION << std::endl;
		int mypet = ANIMAL_PIG;
		std::cout << ANIMAL_HORSE<<std::endl; // конвертируется в int, а затем выводится на экран



	system("pause");
	return 0;
}